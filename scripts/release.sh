#! /usr/bin/env bash

## Command line parameters
if [[ $# != 1 ]]; then
    cat <<USAGE
usage:
  $0 <release version>
example:
  $0 '2.0.1'
USAGE
    exit 1
fi

## Process and show version
NEW=`sed 's/\./\\\\./g' <<<"$1"`

NEW_MAJOR=`sed 's/^\([0-9]*\)\.[0-9]*\.[0-9]*/\1/' <<<"$1"`
NEW_MINOR=`sed 's/^[0-9]*\.\([0-9]*\)\.[0-9]*/\1/' <<<"$1"`
NEW_RELEASE=`sed 's/^[0-9]*\.[0-9]*\.\([0-9]*\)/\1/' <<<"$1"`

NEW_DOT_THREE="${NEW_MAJOR}\\.${NEW_MINOR}\\.${NEW_RELEASE}"

echo "#==============================================="
echo "# Plain    -> '${NEW}'"
echo "#-----------------------------------------------"
echo "# Major    -> '${NEW_MAJOR}'"
echo "# Minor    -> '${NEW_MINOR}'"
echo "# Release  -> '${NEW_RELEASE}'"
echo "#==============================================="
echo

## Make script safe to call from anywhere by going to the right location first
SCRIPT_DIR=`dirname "${PWD}/$0"`
echo "Entering directory \`${SCRIPT_DIR}'"
pushd "${SCRIPT_DIR}" &>/dev/null || exit 1

## Patch version.h
TMPFILE=`mktemp versionPatch.XXXXXX`
VERSION_H="${SCRIPT_DIR}/src/gui/version.h"
echo "Patching \`${VERSION_H}'"

sed 	-e 's/^\(#define ACD_VERSION_MAJOR \).*/\1'${NEW_MAJOR}'/' \
		-e	's/^\(#define ACD_VERSION_MINOR \).*/\1'${NEW_MINOR}'/' \
		-e	's/^\(#define ACD_VERSION_RELEASE \).*/\1'${NEW_RELEASE}'/' \
		"${VERSION_H}" > "${TMPFILE}"

mv -f "${TMPFILE}" "${VERSION_H}"

#TODO::Auto increment of release number
#VER_FILE="${SCRIPT_DIR}/src/gui/version.h"
#MAJOR =` grep "#define ACD_VERSION_MAJOR" ${VER_FILE}  | tr -d "#define ACD_VERSION_MAJOR" | tr -d "\n"`
#MAJOR= MAJOR+1
#echo "MAJOR IS: ${MAJOR}"
#exit 1

## Patch acd_manual.dox
TMPFILE=`mktemp versionPatch.XXXXXX`
ACDDOX_H="${SCRIPT_DIR}/acd_manual.dox"
echo "Patching \`${ACDDOX_H}'"
sed  -e	's/^\(PROJECT_NUMBER         = \).*/\1'"${NEW_DOT_THREE}"'/' "${ACDDOX_H}" > "${TMPFILE}"
mv -f "${TMPFILE}" "${ACDDOX_H}"

## Patch acd_setup.iss
TMPFILE=`mktemp versionPatch.XXXXXX`
SETUP_H="${SCRIPT_DIR}/releases/acd_setup.iss"
echo "Patching \`${SETUP_H}'"
sed -e	's/^\(#define Version \).*/\1"'"${NEW_DOT_THREE}"'"/' "${SETUP_H}" > "${TMPFILE}"
mv -f "${TMPFILE}" "${SETUP_H}"

CREATION_FAILED=0
QT_LOCATION_FILE=qtLocation

if [ ! -f ${QT_LOCATION_FILE} ]; then
     echo Cannot find the location file ${QT_LOCATION_FILE}. Run qmake first
     CREATION_FAILED=1
     exit 1
fi

COMPILER_CYGWIN="$COMPILER"
export COMPILER=$(cygpath -aw "$COMPILER_CYGWIN")
if [ "$OSTYPE" == "cygwin" ]; then
    if [ "$2" != "clean" ]; then
        "$(cygpath -a $COMSPEC)" /k build.bat release clean
	else
		"$(cygpath -a $COMSPEC)" /k build.bat release clean
    fi
else
    if [ "$2" != "clean" ]; then
        "$COMSPEC" //k build.bat release clean
	else
		"$COMSPEC" //k build.bat release clean
    fi
fi

doxygen.exe acd_manual.dox
## Get the Qtlocation from the file generated by qmake
NEW_LOCATION=`head -n 1 ${QT_LOCATION_FILE} | tr -d \n`
NEW_LOCATION=`echo ${NEW_LOCATION} | sed -e 's:\/:\\\\\\\:g' `
ACD_SETUP="${SCRIPT_DIR}/releases/acd_setup.iss"
TMPFILE=`mktemp ${QT_LOCATION_FILE}.XXXXXX`

## patch the installation script so that we are linking the correct DLLs
echo "Patching \`${ACD_SETUP}'"
sed 's/^\(#define QtLocation \).*/\1"'"${NEW_LOCATION}"'"/' "${ACD_SETUP}" > "${TMPFILE}"
mv -f "${TMPFILE}" "${ACD_SETUP}"

SETUP_FILE="releases/ACD_latest_Snapshot/ACD_${NEW_MAJOR}.${NEW_MINOR}.${NEW_RELEASE}_setup.exe"
# Delete the setup file if it already exists
if [[ -e "${SETUP_FILE}" ]]; then
    echo "Remove old Setup File ..."
    rm -rf "${SETUP_FILE}"
fi

## Finally compile the script to generate the package
echo "Generating ${SETUP_FILE}"
"/cygdrive/c/Program Files/ISTool/ISTool.exe" -compile releases/acd_setup.iss

#
# Function to check if a file exists and to copy it into the Release directory if it does.
# Parm 1:  Relative path of file to copy
# Parm 2:  Path of file in Release directory 
function checkFile ()
{
    if [[ -e $1 ]]; then
		echo "$2 OK"
    else
        echo Cannot find file [$1]
        FAIL=1
    fi
}

echo "Copying files into Release directory..."
FAIL=0
checkFile "${SETUP_FILE}"

if [[ $FAIL -ne 0 ]]; then
    echo "***** FAILED TO CREATE SETUP FILE *****"
else
    echo "Completed."
fi

## Go back to original $PWD
echo "Leaving directory \'${SCRIPT_DIR}'"
popd &>/dev/null || exit 1
